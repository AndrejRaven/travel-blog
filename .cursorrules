# Reguły projektu - Nasz Blog

## System motywów

- Projekt używa Tailwind CSS z klasą `dark:` do zarządzania motywami
- **ZAWSZE używaj Tailwind classes z `dark:` prefix** zamiast inline styles
- **NIE używaj `useTheme()` hook** - Tailwind automatycznie przełącza motywy
- **NIE używaj inline styles** - używaj tylko Tailwind classes (z wyjątkami dla wartości dynamicznych)
- Motywy przełączane są przez klasę `dark` w HTML (automatycznie przez ThemeProvider)

### Przykłady użycia motywów:

```tsx
// ✅ DOBRZE - Tailwind classes
<div className="bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100">
  <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
    Tytuł
  </h1>
  <p className="text-gray-600 dark:text-gray-300">
    Opis
  </p>
</div>

// ❌ ŹLE - inline styles z useTheme
const { theme } = useTheme();
<div style={{ backgroundColor: theme === 'dark' ? '#1e293b' : '#ffffff' }}>

// ❌ ŹLE - hardkodowane kolory
<div className="bg-white text-black">
```

### Standardowe kolory motywów:

- **Tła**: `bg-white dark:bg-gray-800` (karty), `bg-gray-50 dark:bg-gray-900` (sekcje)
- **Tekst główny**: `text-gray-900 dark:text-gray-100`
- **Tekst drugorzędny**: `text-gray-600 dark:text-gray-300`
- **Tekst pomocniczy**: `text-gray-500 dark:text-gray-400`
- **Ramki**: `border-gray-200 dark:border-gray-700`
- **Hover**: `hover:bg-gray-100 dark:hover:bg-gray-700`

## Struktura projektu

- Komponenty UI w `components/ui/`
- Komponenty layout w `components/layout/`
- Sekcje w `components/sections/`
- Logika biznesowa w `lib/`
- Strony w `app/`

## Konwencje kodu

- Używaj TypeScript
- Komponenty w PascalCase
- Pliki w kebab-case
- Zawsze dodawaj odpowiednie typy
- **ZAWSZE używaj Tailwind CSS z `dark:` prefix dla motywów**
- **NIE używaj inline styles** - tylko Tailwind classes (z wyjątkami dla wartości dynamicznych)
- **NIE używaj `useTheme()` hook** - Tailwind automatycznie przełącza motywy

## Komponenty UI

- ZAWSZE używaj istniejących komponentów z `components/ui/` zamiast tworzenia nowych
- Dla przycisków używaj `Button` z odpowiednimi wariantami (primary, secondary, outline, youtube)
- Dla linków wewnętrznych używaj `Link` z `@/components/ui/Link` (NIE next/link)
- Dla linków zewnętrznych używaj `Button` z `external` prop
- Sprawdzaj dostępne komponenty przed implementacją nowych elementów
- Komponenty UI mają wbudowane style motywów i responsywność

## Ikonki

- **ZAWSZE używaj ikonek z `lucide-react`** zamiast własnych SVG lub innych bibliotek
- Importuj ikonki: `import { IconName } from "lucide-react"`
- Używaj klas Tailwind do stylowania: `className="w-4 h-4 text-gray-600 dark:text-gray-400"`
- **NIE używaj** własnych SVG ikonek (oprócz tych z Sanity CMS)
- **NIE używaj** innych bibliotek ikonek (react-icons, heroicons, etc.)
- Dla ikonek social media używaj: `Facebook`, `Youtube`, `Instagram`, `Linkedin`, `Twitter`
- Dla ikonek UI używaj: `Home`, `Menu`, `X`, `ChevronDown`, `ChevronUp`, `ArrowRight`, `Mail`, `Heart`, `FileText`

## Komponenty Shared

- ZAWSZE używaj komponentów z `components/shared/` dla powtarzających się elementów
- `PageLayout` - główny layout dla stron z opcjami maxWidth (sm, md, lg, xl, 2xl, 4xl, 6xl)
- `PageHeader` - standardowy nagłówek dla wszystkich stron (title, subtitle)
- `InfoCard` - kolorowe karty informacyjne z wariantami (blue, green, yellow, red, purple, gray)
- `BackToHome` - przycisk powrotu do strony głównej
- `SectionHeader` - nagłówki sekcji z opcjami wyrównania

## Komponenty Sections

- Używaj komponentów z `components/sections/` dla sekcji treści
- `HeroBanner` - baner hero z opcjami layoutu i kolorów
- `BackgroundHeroBanner` - baner hero z obrazem w tle
- `InstagramSection` - sekcja z Instagram
- `EmbedYoutube` - osadzanie filmów YouTube
- `Newsletter` - formularz zapisu do newslettera

## Dostępne komponenty UI

- `Button` - przyciski z wariantami (primary, secondary, outline, youtube)
- `Link` - linki z wariantami (arrow, underline) - ZAWSZE używaj zamiast next/link
- `RichText` - renderowanie treści z Sanity CMS
- `ThemeToggle` - przełącznik motywów
- `Logo` - logo aplikacji
- `ComponentRenderer` - renderer komponentów z Sanity

## Fonty

- **Inter** (`font-sans`) - główny font dla tekstu, nagłówków i interfejsu
- **Playfair Display** (`font-serif`) - elegancki font dla tytułów i wyróżnień
- **Source Code Pro** (`font-mono`) - font monospace dla kodu i preformatowanego tekstu
- Zawsze używaj klas Tailwind: `font-sans`, `font-serif`, `font-mono`
- Dla nagłówków blogowych preferuj `font-serif` (Playfair Display)
- Dla tekstu głównego używaj `font-sans` (Inter)

## Sanity CMS

- Schematy w `studio/schemas/`
- Używaj `sanity.ts` do konfiguracji
- Komponenty RichText w `components/ui/RichText.tsx`

## Tailwind CSS - Ważne reguły

### Dynamiczne klasy - NIE RÓB TEGO!

- **NIE używaj dynamicznego generowania klas Tailwind** - Tailwind musi znać wszystkie klasy w czasie kompilacji
- **NIE używaj template literals** do tworzenia klas dynamicznie
- **NIE używaj zmiennych** w nazwach klas

```tsx
// ❌ ŹLE - dynamiczne klasy (nie działają!)
const opacity = 50;
<div className={`bg-opacity-${opacity}`}>

// ❌ ŹLE - template literals z zmiennymi
const size = 'lg';
<div className={`text-${size}`}>

// ❌ ŹLE - interpolacja w klasach
<div className={`bg-${color}-500`}>
```

### Jak rozwiązywać dynamiczne style:

```tsx
// ✅ DOBRZE - używaj inline styles dla wartości dynamicznych
<div style={{ opacity: opacity / 100 }}>

// ✅ DOBRZE - używaj mapowania dla ograniczonej liczby opcji
const sizeClasses = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-lg'
};
<div className={sizeClasses[size]}>

// ✅ DOBRZE - używaj warunków dla znanych wartości
<div className={isActive ? 'bg-green-500' : 'bg-gray-500'}>

// ✅ DOBRZE - używaj CSS custom properties dla wartości dynamicznych
<div style={{ '--opacity': opacity / 100 }} className="bg-black opacity-[var(--opacity)]">

// ✅ DOBRZE - przykład z BackgroundHeroBanner
<div
  className="absolute inset-0 w-full h-full bg-black"
  style={{ opacity: (layout.overlayOpacity || 30) / 100 }}
>
```

### Kiedy używać inline styles:

- **Wartości dynamiczne** (opacity, width, height, transform)
- **Kolory z API** (hex, rgb, hsl)
- **Animacje** (keyframes, duration)
- **Responsywność** (breakpointy niestandardowe)

### Kiedy używać Tailwind classes:

- **Wszystkie standardowe style** (kolory, rozmiary, spacing)
- **Responsywność** (sm:, md:, lg:, xl:)
- **Motywy** (dark:, light:)
- **Stany** (hover:, focus:, active:)

## Responsywność

- Mobile-first approach
- Używaj breakpointów Tailwind
- Testuj na różnych urządzeniach

## Refaktoryzacja i DRY

- ZAWSZE używaj istniejących komponentów zamiast duplikowania kodu
- Przed implementacją nowego elementu sprawdź czy nie ma podobnego komponentu
- Używaj `PageLayout` jako podstawy dla wszystkich stron
- `PageHeader` + `InfoCard` + `BackToHome` tylko dla stron informacyjnych
- Wszystkie linki wewnętrzne muszą używać `@/components/ui/Link`
- Wszystkie linki zewnętrzne muszą używać `Button` z `external` prop
- Kolorowe karty informacyjne używają `InfoCard` z odpowiednim wariantem

## Struktura stron

### Strony informacyjne (Polityka, Regulamin, Kontakt, Wsparcie)

```tsx
import PageLayout from "@/components/shared/PageLayout";
import PageHeader from "@/components/shared/PageHeader";
import InfoCard from "@/components/shared/InfoCard";
import BackToHome from "@/components/shared/BackToHome";

export default function StronaInformacyjna() {
  return (
    <PageLayout maxWidth="4xl">
      <PageHeader title="Tytuł" subtitle="Podtytuł" />

      <InfoCard variant="blue">{/* Treść */}</InfoCard>

      <BackToHome className="mt-12" />
    </PageLayout>
  );
}
```

### Strony kategorii

```tsx
import PageLayout from "@/components/shared/PageLayout";
import PageHeader from "@/components/shared/PageHeader";

export default function Kategoria() {
  return (
    <PageLayout maxWidth="6xl">
      <PageHeader title="Nazwa kategorii" subtitle="Opis kategorii" />

      {/* Lista postów */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Posty */}
      </div>
    </PageLayout>
  );
}
```

### Strony postów

```tsx
import PageLayout from "@/components/shared/PageLayout";

export default function Post() {
  return (
    <PageLayout maxWidth="4xl">
      {/* Nagłówek postu */}
      <header className="mb-8">
        <h1 className="text-4xl font-serif font-bold">Tytuł postu</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-2">Data publikacji</p>
      </header>

      {/* Treść postu */}
      <article className="prose prose-lg max-w-none">{/* Treść */}</article>
    </PageLayout>
  );
}
```
